    struct addrinfo {
        int              ai_flags;     // AI_PASSIVE, AI_CANONNAME, etc.
        int              ai_family;    // AF_INET, AF_INET6, AF_UNSPEC
        int              ai_socktype;  // SOCK_STREAM, SOCK_DGRAM
        int              ai_protocol;  // use 0 for "any"
        size_t           ai_addrlen;   // size of ai_addr in bytes
        struct sockaddr *ai_addr;      // struct sockaddr_in or _in6
        char            *ai_canonname; // full canonical hostname
    
        struct addrinfo *ai_next;      // linked list, next node
    };

The struct sockaddr holds socket address information for many types of sockets.

    struct sockaddr {
        unsigned short    sa_family;    // address family, AF_xxx
        char              sa_data[14];  // 14 bytes of protocol address
    }; 

sa_family can be a variety of things, but it’ll be AF_INET (IPv4) or AF_INET6 (IPv6) for 
everything we do in this document. sa_data contains a destination address and port number 
for the socket. This is rather unwieldy since you don’t want to tediously pack the address 
in the sa_data by hand. 

To deal with struct sockaddr, programmers created a parallel structure: struct sockaddr_in (“in” for “Internet”) 
to be used with IPv4. And this is the important bit: a pointer to a struct sockaddr_in can be cast to a pointer 
to a struct sockaddr and vice-versa. So even though connect() wants a struct sockaddr*, you can still use a struct 
sockaddr_in and cast it at the last minute!

    // (IPv4 only--see struct sockaddr_in6 for IPv6)
    
    struct sockaddr_in {
        short int          sin_family;  // Address family, AF_INET
        unsigned short int sin_port;    // Port number
        struct in_addr     sin_addr;    // Internet address
        unsigned char      sin_zero[8]; // Same size as struct sockaddr
    };

    struct in_addr {
        uint32_t s_addr; // that's a 32-bit int (4 bytes)
    };

    // (IPv6 only--see struct sockaddr_in and struct in_addr for IPv4)

    struct sockaddr_in6 {
        u_int16_t       sin6_family;   // address family, AF_INET6
        u_int16_t       sin6_port;     // port number, Network Byte Order
        u_int32_t       sin6_flowinfo; // IPv6 flow information
        struct in6_addr sin6_addr;     // IPv6 address
        u_int32_t       sin6_scope_id; // Scope ID
    };

    struct in6_addr {
        unsigned char   s6_addr[16];   // IPv6 address
    };

	//socket()
    #include <sys/types.h>
    #include <sys/socket.h>
    
    int socket(int domain, int type, int protocol); 

But what are these arguments? They allow you to say what kind of socket you want (IPv4 or IPv6, stream or 
datagram, and TCP or UDP).

It used to be people would hardcode these values, and you can absolutely still do that. (domain is PF_INET 
or PF_INET6, type is SOCK_STREAM or SOCK_DGRAM, and protocol can be set to 0 to choose the proper protocol 
for the given type. Or you can call getprotobyname() to look up the protocol you want, “tcp” or “udp”.)


            /*if ((pos = tmp.find("\r")) != std::string::npos)
            {
                aux = tmp.substr(0, pos);
                tmp = tmp.substr(pos);
                client->_request->_req += aux;
                client->_chuckCont += aux.size();
                strcpy(client->_request->_rBuf, tmp.c_str());
                tmp.clear();
            }
            else
            {
                if (tmp.size() + client->_chuckCont > client->_request->_chucklen)
                {
                    aux = tmp.substr(0, client->_request->_chucklen - client->_chuckCont);
                    client->_chuckCont += aux.size();
                    client->_request->_req += aux;
                    strcpy(client->_request->_rBuf, tmp.substr(client->_request->_chucklen - client->_chuckCont).c_str());
                    tmp.clear();
                }
                else
                {
                    client->_request->_req += tmp;
                    tmp.clear();
                    memset(client->_request->_rBuf, '\0', BUFFER_SIZE);
                }
            }*/